{"version":3,"sources":["client.js","components/Timestamper.js","components/CategoryEmojifier.js","components/AllPosts.js","components/OnePost.js","components/archiveSort.js","components/Archive.js","components/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["sanityclient","projectId","dataset","useCdn","Timestamp","timecode","timeToStamp","Date","day","getUTCDate","getUTCMonth","getUTCFullYear","getUTCHours","getUTCMinutes","Emojify","category","title","AllPosts","useState","allPostsData","setAllPosts","useEffect","sanityClient","fetch","then","data","sort","a","b","console","log","publishedAt","parse","catch","error","Container","className","fluid","Row","Col","Jumbotron","CardDeck","map","post","index","Card","style","marginBottom","CardBody","CardTitle","tag","categories","CardSubtitle","textAlign","CardText","blocks","body","slice","clientConfig","projectID","to","slug","current","color","Button","imageUrlBuilder","OnePost","postData","setPostData","useParams","padding","Spinner","children","ArchiveSort","Table","striped","hover","Archive","NavBar","Navbar","dark","expand","NavbarBrand","href","Nav","navbar","NavItem","NavLink","App","component","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.742f587e.chunk.js","sourcesContent":["import sanityclient from \"@sanity/client\";\r\n\r\nexport default sanityclient({\r\n  projectId: \"9kkh2oou\", //find this at manage.sanity.io or in sanity.json\r\n  dataset: \"production\",\r\n  useCdn: true\r\n});\r\n","import { React } from \"react\";\r\n\r\nexport const Timestamp = timecode => {\r\n  let timeToStamp = new Date(timecode);\r\n  let day = timeToStamp.getUTCDate();\r\n  let month = timeToStamp.getUTCMonth() + 1;\r\n  let year = timeToStamp.getUTCFullYear();\r\n  let hour = timeToStamp.getUTCHours() + 1;\r\n  let minutes = timeToStamp.getUTCMinutes() + 1;\r\n  let timestamp = month + \"/\" + day + \"/\" + year + \" @ \" + hour + \":\" + minutes;\r\n\r\n  return timestamp;\r\n};\r\n","import { React, useState, useEffect } from \"react\";\r\n\r\nexport const Emojify = category => {\r\n  if (category) {\r\n    let { title } = category;\r\n    if (title === \"testcase\") {\r\n      return \"📝\";\r\n    } else {\r\n      return \"woops\";\r\n    }\r\n  } else {\r\n    return \"📄\";\r\n  }\r\n};\r\n\r\nexport default Emojify;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport sanityClient from \"../client.js\";\r\nimport { Timestamp } from \"./Timestamper.js\";\r\nimport Emojify from \"./CategoryEmojifier.js\";\r\nimport BlockContent from \"@sanity/block-content-to-react\";\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Table,\r\n  Card,\r\n  CardDeck,\r\n  CardImg,\r\n  CardText,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Button\r\n} from \"reactstrap\";\r\n\r\nexport default function AllPosts() {\r\n  const [allPostsData, setAllPosts] = useState(null);\r\n\r\n  useEffect(() => {\r\n    sanityClient\r\n      .fetch(\r\n        `*[_type == \"post\"]{\r\n          title,\r\n          slug,\r\n          publishedAt,\r\n          mainImage{\r\n            asset->{\r\n              _id,\r\n              url\r\n            }\r\n          },\r\n          categories[0] -> {\r\n            title\r\n          },\r\n        body,\r\n        publishedAt\r\n        }`\r\n      )\r\n      .then(data =>\r\n        setAllPosts(\r\n          data.sort(function(a, b) {\r\n            console.log(a.publishedAt);\r\n            return Date.parse(b.publishedAt) - Date.parse(a.publishedAt);\r\n          })\r\n        )\r\n      )\r\n      .catch(console.error);\r\n  }, []);\r\n\r\n  return (\r\n    <Container className=\"themed-container\" fluid=\"sm\">\r\n      <Row>\r\n        <Col>\r\n          <Jumbotron fluid>\r\n            <Container fluid>\r\n              <h1 className=\"display-3\">&#128075; Hello.</h1>\r\n            </Container>\r\n            <p>\r\n              This is a blog I made using React and Sanity. I also used\r\n              Reactstrap for the layout. I don't like blogging.\r\n            </p>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n      <CardDeck>\r\n        {allPostsData &&\r\n          allPostsData.map((post, index) => (\r\n            <Card\r\n              style={{\r\n                marginBottom: \"2%\"\r\n              }}\r\n            >\r\n              <CardBody>\r\n                <Row>\r\n                  <Col>\r\n                    <CardTitle tag=\"h5\" key={index}>\r\n                      {Emojify(post.categories)}\r\n                      {post.title}\r\n                    </CardTitle>\r\n                  </Col>\r\n                  <Col>\r\n                    <CardSubtitle\r\n                      tag=\"h6\"\r\n                      className=\"text-muted\"\r\n                      style={{ textAlign: \"right\" }}\r\n                    >\r\n                      {Timestamp(post.publishedAt)}\r\n                    </CardSubtitle>\r\n                  </Col>\r\n                </Row>\r\n                <CardText>\r\n                  <BlockContent\r\n                    blocks={post.body.slice(0, 2)}\r\n                    projectId={sanityClient.clientConfig.projectID}\r\n                    dataset={sanityClient.clientConfig.dataset}\r\n                  />\r\n                </CardText>\r\n                <CardText style={{ textAlign: \"right\" }}>\r\n                  <Link\r\n                    to={\"/\" + post.slug.current}\r\n                    key={post.slug.current}\r\n                    style={{ color: \"white\" }}\r\n                  >\r\n                    {\" \"}\r\n                    <Button color=\"dark\">Read more</Button>\r\n                  </Link>\r\n                </CardText>\r\n              </CardBody>\r\n            </Card>\r\n          ))}\r\n      </CardDeck>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport sanityClient from \"../client.js\";\r\nimport { Timestamp } from \"./Timestamper.js\";\r\nimport Emojify from \"./CategoryEmojifier.js\";\r\nimport BlockContent from \"@sanity/block-content-to-react\";\r\nimport imageUrlBuilder from \"@sanity/image-url\";\r\nimport { Container, Row, Col, Spinner } from \"reactstrap\";\r\n\r\nconst builder = imageUrlBuilder(sanityClient);\r\nfunction urlFor(source) {\r\n  return builder.image(source);\r\n}\r\n\r\nexport default function OnePost() {\r\n  const [postData, setPostData] = useState(null);\r\n  const { slug } = useParams();\r\n\r\n  useEffect(() => {\r\n    sanityClient\r\n      .fetch(\r\n        `*[slug.current == $slug] {\r\n          title,\r\n          slug,\r\n          mainImage{\r\n            asset->{\r\n              _id,\r\n              url\r\n            }\r\n          },\r\n          categories[0] -> {\r\n            title\r\n          },\r\n        body,\r\n        publishedAt\r\n      }`,\r\n        { slug }\r\n      )\r\n      .then(data => setPostData(data[0]))\r\n      .catch(console.error);\r\n  }, [slug]);\r\n\r\n  if (!postData)\r\n    return (\r\n      <Container style={{ padding: \"10% 50% 50% 50%\" }}>\r\n        <Spinner children=\"\" />\r\n      </Container>\r\n    );\r\n\r\n  return (\r\n    <Container className=\"themed-container\" fluid=\"sm\">\r\n      <Row>\r\n        <Row>\r\n          <Col>\r\n            <h2>\r\n              {Emojify(postData.categories)}\r\n              {postData.title}\r\n            </h2>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <p className=\"text-muted\">\r\n            Posted at {Timestamp(postData.publishedAt)} to{\" \"}\r\n            {postData.categories.title}\r\n          </p>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <BlockContent\r\n              blocks={postData.body}\r\n              projectId={sanityClient.clientConfig.projectID}\r\n              dataset={sanityClient.clientConfig.dataset}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n","import { React, useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Table } from \"reactstrap\";\r\nimport sanityClient from \"../client.js\";\r\nimport { Timestamp } from \"./Timestamper.js\";\r\nimport Emojify from \"./CategoryEmojifier.js\";\r\n\r\nexport const ArchiveSort = () => {\r\n  const [allPostsData, setAllPosts] = useState(null);\r\n\r\n  useEffect(() => {\r\n    sanityClient\r\n      .fetch(\r\n        `*[_type == \"post\"]{\r\n          title,\r\n          slug,\r\n          publishedAt,\r\n          categories[0] -> {\r\n            title\r\n          }\r\n        }`\r\n      )\r\n      .then(data =>\r\n        setAllPosts(\r\n          data.sort(function(a, b) {\r\n            return Date.parse(b.publishedAt) - Date.parse(a.publishedAt);\r\n          })\r\n        )\r\n      )\r\n      .catch(console.error);\r\n  }, []);\r\n\r\n  return (\r\n    <Table striped hover>\r\n      <tbody>\r\n        {allPostsData &&\r\n          allPostsData.map((post, index) => (\r\n            <tr>\r\n              <td>\r\n                <Link to={\"/\" + post.slug.current} key={post.slug.current}>\r\n                  <span key={index}>\r\n                    {console.log(post)}\r\n                    {Emojify(post.categories)} {post.title}\r\n                  </span>{\" \"}\r\n                </Link>\r\n              </td>\r\n              <td className=\"text-muted\" style={{ textAlign: \"right\" }}>\r\n                {Timestamp(post.publishedAt)}\r\n              </td>\r\n            </tr>\r\n          ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport sanityClient from \"../client.js\";\r\nimport { ArchiveSort } from \"./archiveSort\";\r\nimport { Jumbotron, Container, Row, Col, Spinner } from \"reactstrap\";\r\n\r\nexport default function Archive() {\r\n  const [allPostsData, setAllPosts] = useState(null);\r\n\r\n  useEffect(() => {\r\n    sanityClient\r\n      .fetch(\r\n        `*[_type == \"post\"]{\r\n          title,\r\n          slug,\r\n          publishedAt,\r\n        }`\r\n      )\r\n      .then(data => setAllPosts(data))\r\n      .catch(console.error);\r\n  }, []);\r\n\r\n  if (!allPostsData)\r\n    return (\r\n      <Container style={{ padding: \"10% 50% 50% 50%\" }}>\r\n        <Spinner children=\"\" />\r\n      </Container>\r\n    );\r\n\r\n  return (\r\n    <Container className=\"themed-container\" fluid=\"sm\">\r\n      <Row>\r\n        <Col>\r\n          <Container fluid>\r\n            <h1 className=\"display-3\">🗄️ Archive</h1>\r\n          </Container>\r\n          <ArchiveSort />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Navbar, NavbarBrand, Nav, NavItem, NavLink } from \"reactstrap\";\r\n\r\nexport const NavBar = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <Navbar color=\"dark\" dark expand=\"md\" style={{ padding: \"1%\" }}>\r\n      <NavbarBrand href=\"/\">dialectrical's blog</NavbarBrand>\r\n      <Nav className=\"mr-auto\" navbar>\r\n        <NavItem>\r\n          <NavLink href=\"/about-me\">About</NavLink>\r\n        </NavItem>\r\n        <NavItem>\r\n          <NavLink href=\"/archive\">Archive</NavLink>\r\n        </NavItem>\r\n      </Nav>\r\n    </Navbar>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport AllPosts from \"./components/AllPosts.js\";\r\nimport OnePost from \"./components/OnePost.js\";\r\nimport Archive from \"./components/Archive.js\";\r\nimport { NavBar } from \"./components/NavBar.js\";\r\nimport { Container } from \"reactstrap\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route component={AllPosts} path=\"index.html/\" exact />\r\n          <Route component={Archive} path=\"index.html/archive\" />\r\n          <Route component={OnePost} path=\"index.html/:slug\" />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}